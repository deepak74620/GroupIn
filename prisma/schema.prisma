// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


model Event {
      id          String   @id @default(cuid())
      name        String
      description String? // Optional description
      date        DateTime // The date and time of the event
      createdAt   DateTime @default(now())
      updatedAt   DateTime @updatedAt

      // Relations
      groupId     String
      group       Group    @relation(fields: [groupId], references: [id])
      createdById String
      createdBy   User     @relation(fields: [createdById], references: [id])
    }

model Message {
      id        String   @id @default(cuid())
      content   String
      createdAt DateTime @default(now())

      // Relations
      authorId  String
      author    User     @relation(fields: [authorId], references: [id])
      groupId   String
      group     Group    @relation(fields: [groupId], references: [id])
    }

model GroupInvite {
      id        String   @id @default(cuid()) // This unique ID will be our invite code
      createdAt DateTime @default(now())

      // Relations
      groupId   String
      group     Group    @relation(fields: [groupId], references: [id])
    }


// Add this new model
    model Group {
      id        String   @id @default(cuid())
      name      String
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      // Relation Fields
      createdById String
      createdBy   User   @relation("CreatedGroups", fields: [createdById], references: [id])

      messages  Message[] // Add this line to link to messages
      invites   GroupInvite[] // Add relation from Group to its invites
      events    Event[]   // Add this line to link a Group to its Events

      // 1. Add this line: The list of users that are members of this group
      members   User[] @relation("GroupMembers")
    }

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    groupsCreated Group[] @relation("CreatedGroups") // Rename to be explicit
      
      messages      Message[] // Add this line to link to messages
      eventsCreated Event[]   // Add this line to link a User to the Events they create

      // 2. Add this line: The list of groups this user is a member of
      memberOf      Group[] @relation("GroupMembers")

      
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
